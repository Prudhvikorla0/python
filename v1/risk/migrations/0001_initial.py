# Generated by Django 4.0.4 on 2023-01-02 21:03

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('nodes', '0029_node_inviter_questionnaire_node_ro_number_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='RiskScore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('year', models.IntegerField(default=1970)),
                ('creator', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='creator_%(class)s_objects', to=settings.AUTH_USER_MODEL)),
                ('node', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='risk_score', to='nodes.node', verbose_name='Node')),
                ('updater', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updater_%(class)s_objects', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('node', 'year')},
            },
        ),
        migrations.CreateModel(
            name='RiskComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('comment', models.CharField(max_length=2000)),
                ('severity', models.IntegerField(choices=[(101, 'Low'), (201, 'Medium'), (301, 'High')], default=301)),
                ('creator', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='creator_%(class)s_objects', to=settings.AUTH_USER_MODEL)),
                ('score', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='risk.riskscore', verbose_name='Risk Comments')),
                ('updater', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updater_%(class)s_objects', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-created_on',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CategoryScore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('total', models.FloatField(default=0.0)),
                ('average', models.FloatField(default=0.0)),
                ('applicable_indicators', models.IntegerField(default=0)),
                ('risk_level', models.IntegerField(choices=[(101, 'Risky'), (201, 'Safe'), (1001, 'All')], default=101)),
                ('category', models.IntegerField(choices=[(101, 'Environment'), (201, 'Social'), (301, 'Governance'), (1001, 'Overall')], default=101)),
                ('creator', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='creator_%(class)s_objects', to=settings.AUTH_USER_MODEL)),
                ('score', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='categories', to='risk.riskscore', verbose_name='Category Score')),
                ('updater', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updater_%(class)s_objects', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('score', 'risk_level', 'category')},
            },
        ),
    ]
